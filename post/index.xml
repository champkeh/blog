<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on champ的个人博客</title>
    <link>https://blog.champ.design/post/</link>
    <description>Recent content in Posts on champ的个人博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Fri, 01 Oct 2021 10:31:46 +0800</lastBuildDate><atom:link href="https://blog.champ.design/post/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>2021年目标</title>
      <link>https://blog.champ.design/post/2021/goal/</link>
      <pubDate>Fri, 01 Oct 2021 10:31:46 +0800</pubDate>
      
      <guid>https://blog.champ.design/post/2021/goal/</guid>
      <description>2021年要达到的目标如下：
 把blog和tools这两个项目搭建起来，配置自动发布，后续来了兴致也不至于没有地方写代码。 阅读《深入理解计算机系统》这本书 阅读并学习ECMA规范  </description>
    </item>
    
    <item>
      <title>博客搭建过程</title>
      <link>https://blog.champ.design/post/2021/10/blog-build-process/</link>
      <pubDate>Fri, 01 Oct 2021 10:31:46 +0800</pubDate>
      
      <guid>https://blog.champ.design/post/2021/10/blog-build-process/</guid>
      <description>采用的框架 博客采用hugo静态站点生成器，主题目前使用的是jane，不过个人觉得并不是很符合我的口味，有时间还是需要魔改一下。
关于自动发布到github  关于采用Github Actions自动发布hugo站点，可以参考 这篇文章 和 这篇文章
 在项目根目录添加.github/workflows/deploy.yml文件，内容如下：
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49  # Workflow to build and deploy site to Github Pages using Hugoname:Build and Deploy Blog siteon:push:branches:[master ]jobs:build-and-deploy:runs-on:ubuntu-lateststeps:# Step 1 - Checks-out your repository under $GITHUB_WORKSPACE- name:Checkoutuses:actions/checkout@v2with:submodules:true# Fetch Hugo themesfetch-depth:0# Fetch all history for .</description>
    </item>
    
    <item>
      <title>Deno安装脚本的解读</title>
      <link>https://blog.champ.design/post/2019/05/deno_install_explain/</link>
      <pubDate>Wed, 22 May 2019 23:22:51 +0800</pubDate>
      
      <guid>https://blog.champ.design/post/2019/05/deno_install_explain/</guid>
      <description>install.sh源码
deno的完整安装脚本如下:
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72  #!</description>
    </item>
    
    <item>
      <title>MongoDB 学习笔记之CRUD</title>
      <link>https://blog.champ.design/post/2019/05/mongo-learn-note-1/</link>
      <pubDate>Sat, 18 May 2019 11:24:11 +0800</pubDate>
      
      <guid>https://blog.champ.design/post/2019/05/mongo-learn-note-1/</guid>
      <description>启动一个 MongoDB 服务器容器 1 2  $ docker pull mongo:4 $ docker run --name mymongo -v /data/docker-db:/data/db -d mongo:4   启动 Mongo Express 容器 1 2  $ docker pull mongo-express $ docker run --link mymongo:mongo -p 8081:8081 -d mongo-express   在浏览器打开 http://localhost:8081，mongo-expres 的界面如下:
启动 Mongo shell 1  $ docker exec -it mymongo mongo   文档的基本操作 1 2 3 4 5 6 7 8 9 10 11 12  # 查看所有数据库 &amp;gt; show dbs admin 0.</description>
    </item>
    
    <item>
      <title>Mac 实用技巧</title>
      <link>https://blog.champ.design/post/2019/05/mac-cheat-sheet/</link>
      <pubDate>Fri, 17 May 2019 13:21:43 +0800</pubDate>
      
      <guid>https://blog.champ.design/post/2019/05/mac-cheat-sheet/</guid>
      <description>微调音量 Shift + Option + 音量键 可以以 1/4 倍调整音量，实现更精细的控制音量
删除键 1 2 3 4 5  单按 delete 删除光标之前的一个字符（默认） 组合 `fn + delete`，删除光标之后的一个字符 组合`option + delete`，删除光标之前的一个单词(英文有效) 组合`fn + option + delete`，删除光标之后的一个单词 组合`command + delete`，删除文件   </description>
    </item>
    
    <item>
      <title>定制even主题</title>
      <link>https://blog.champ.design/post/2019/05/custom-hugo-even-theme/</link>
      <pubDate>Wed, 15 May 2019 23:54:24 +0800</pubDate>
      
      <guid>https://blog.champ.design/post/2019/05/custom-hugo-even-theme/</guid>
      <description>刚开始发现这个主题的时候，感觉很好看，当自己用了一段时间之后，感觉还是需要定制一下才符合自己的审美标准的，所以这篇文章就用来记录对该主题的定制过程。
原始主题地址: https://github.com/olOwOlo/hugo-theme-even
要定制的点 代码块高亮 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15  const app = new Koa() app.use(async (ctx, next) =&amp;gt; { console.log(&amp;#39;enter #1&amp;#39;) await next() console.log(&amp;#39;leave #1&amp;#39;) }) app.use(async (ctx, next) =&amp;gt; { console.log(&amp;#39;enter #2&amp;#39;) await next() console.log(&amp;#39;leave #2&amp;#39;) }) app.listen(3000)   代码块的背景颜色太亮，需要调暗
页面的背景色太亮，晚上看起来太刺眼，需要调暗 页面内容区宽度有点小，需要加大宽度 文章目录的位置和样式需要调整，最后能够放在屏幕边缘，并且鼠标如果没有悬停在上面的话，要显示灰色 原始主题的国际化有点问题，当设置成中文时，上面的菜单没有效果，需要修复 字体的选用，现在的字体不太符合我的审美 各级标题都不明显，需要添加下划线或其他样式进行区分，并且标题和上面的内容间距要调大 </description>
    </item>
    
    <item>
      <title>Koa 项目脚手架</title>
      <link>https://blog.champ.design/post/2019/05/koa-scaffold/</link>
      <pubDate>Wed, 15 May 2019 17:37:34 +0800</pubDate>
      
      <guid>https://blog.champ.design/post/2019/05/koa-scaffold/</guid>
      <description>由于 koa 框架非常精简，不捆绑任何中间件，因此，路由、日志等这些常见的功能都是由单独的模块提供。这里列举一些常用的中间件，可以作为脚手架使用。
koa-router 项目地址: https://github.com/ZijianHe/koa-router
1  npm install koa-router   koa-body 项目地址: https://github.com/dlau/koa-body
用于解析 post/put/... 请求时的 body，支持 json、urlenocded、multipart等格式。
1  npm install koa-body   @koa/cors 项目地址: https://github.com/koajs/cors
官方提供的cors跨域解决方案
1  npm install @koa/cors   koa-session 项目地址: https://github.com/koajs/session
1  npm install koa-session   koa-logger 项目地址: https://github.com/koajs/logger
1  npm install koa-logger   koa-compress 项目地址: https://github.com/koajs/compress
1  npm install koa-compress   koa-static 项目地址: https://github.</description>
    </item>
    
    <item>
      <title>Koa 学习笔记</title>
      <link>https://blog.champ.design/post/2019/05/koa-learn-note/</link>
      <pubDate>Wed, 15 May 2019 10:40:36 +0800</pubDate>
      
      <guid>https://blog.champ.design/post/2019/05/koa-learn-note/</guid>
      <description>nodemon工具的使用 工具说明: 类似于前端开发，我希望node服务器运行起来之后，当我修改了我的代码之后，服务会自动重启，不需要我每次都手动重启服务。
项目地址: https://github.com/remy/nodemon
1 2  $ node install -g nodemon #全局安装 $ nodemon app.js #用 nodemon 替代 node 来启动应用   关于Generator 在老的教程中，中间件的写法会有很多生成器函数的用法，比如:
1 2 3 4 5  app.use(function* (next) { console.log(&amp;#34;1&amp;#34;); yield next; console.log(&amp;#34;2&amp;#34;); });   在koa的v2版中，写法发生了变化:
1 2 3 4 5  app.use(async (ctx, next) =&amp;gt; { console.log(&amp;#34;1&amp;#34;); await next(); console.log(&amp;#34;2&amp;#34;); })    不知道这个是不是只是一个语法的问题，抽时间需要研究一下。 附上es6 generator的教程 MDN function*语法 阮一峰的文章 introduction to koa generator</description>
    </item>
    
    <item>
      <title>Linux常用命令</title>
      <link>https://blog.champ.design/post/2019/05/linux-command/</link>
      <pubDate>Wed, 15 May 2019 09:07:58 +0800</pubDate>
      
      <guid>https://blog.champ.design/post/2019/05/linux-command/</guid>
      <description>清空文件内容 1 2 3 4 5 6 7  $ &amp;gt; filename #这个命令执行完之后，不会自动退出，需要按Ctrl+D结束 $ : &amp;gt; filename #我最常用的，:是一个占位符，不产生任何输出 $ echo &amp;#39;&amp;#39; &amp;gt; filename $ echo /dev/null &amp;gt; filename $ echo &amp;gt; filename $ cat /dev/null &amp;gt; filename $ cp /dev/null filename    关于上面几个命令的解释： &amp;gt; filename的意思是，从标准输入中读取内容并写入到文件filename中，执行完该命令之后，需要立即执行Ctrl+D表示结束输入，因为此时并没有输入任何内容，所以文件就被清空了。 : &amp;gt; filename是上面的改进版，不需要手动执行Ctrl+D   按照时间删除文件 有时候，我会不小心把整个目录下的所有文件上传到服务器上的一个错误的目录下，然后想删除刚上传的文件。但是登录到服务器之后，发现这个目录下不仅仅是刚上传的文件，还有之前就存在的一些文件。而我又不能把这个目录下的所有文件都删除掉，我只想删除刚刚上传的那些文件，也就是说，我只想删除刚刚修改的文件。截图如下:
1 2  find . -mtime -10 #查找当前目录下，10天内修改过的所有文件 find . -mtime -10 -exec rm -Rf {} \;   rsync 使用自定义 ssh key 进行发布 1  rsync -Pav public/ ubuntu@tencent:/var/www/xkiller   </description>
    </item>
    
    <item>
      <title>Introduction to Nodejs 课程笔记</title>
      <link>https://blog.champ.design/post/2019/05/introduction-to-nodejs/</link>
      <pubDate>Wed, 15 May 2019 01:19:41 +0800</pubDate>
      
      <guid>https://blog.champ.design/post/2019/05/introduction-to-nodejs/</guid>
      <description>课程的仓库地址: https://github.com/frontendmasters/intro-node-js</description>
    </item>
    
    <item>
      <title>Nodejs之nextTick vs setImmediate</title>
      <link>https://blog.champ.design/post/2019/05/nodejs-learn-note/</link>
      <pubDate>Tue, 14 May 2019 13:49:09 +0800</pubDate>
      
      <guid>https://blog.champ.design/post/2019/05/nodejs-learn-note/</guid>
      <description>关于 process.nextTick 和 setImmediate 执行时机的问题：
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19  // 加入两个nextTick()的回调函数 process.nextTick(function () { console.log(&amp;#39;nextTick延迟执行1&amp;#39;); }); process.nextTick(function () { console.log(&amp;#39;nextTick延迟执行2&amp;#39;); }); // 加入两个setImmediate()的回调函数 setImmediate(function () { console.log(&amp;#39;setImmediate延迟执行1&amp;#39;); // 进入下次循环  process.nextTick(function () { console.log(&amp;#39;强势插入&amp;#39;); }); }); setImmediate(function () { console.log(&amp;#39;setImmediate延迟执行2&amp;#39;); }); console.log(&amp;#39;正常执行&amp;#39;);   《nodejs深入浅出》的3.4章中的代码执行结果如下：
1 2 3 4 5 6  正常执行 nextTick延迟执行1 nextTick延迟执行2 setImmediate延迟执行1 强势插入 setImmediate延迟执行2   参见</description>
    </item>
    
    <item>
      <title>搭建自己的git服务器</title>
      <link>https://blog.champ.design/post/2019/05/setup-your-own-git-server/</link>
      <pubDate>Mon, 13 May 2019 10:38:03 +0800</pubDate>
      
      <guid>https://blog.champ.design/post/2019/05/setup-your-own-git-server/</guid>
      <description>环境: server: ubuntu 16.4
第一步，安装git: sudo apt-get install git
第二步，创建一个git用户，用来运行git服务： sudo adduser git
第三步，创建证书登录： 收集所有需要登录的用户的公钥，导入到 /home/git/.ssh/authorized_keys 文件中，一行一个。
第四步，初始化git裸仓库： cd /srv sudo git init &amp;ndash;bare blog.git sudo chown -R git:git blog.git
第五步，禁用shell登录： 编辑 /etc/passwd 文件，如下：
1 2  git:x:1001:1001:,,,:/home/git:/bin/bash git:x:1001:1001:,,,:/home/git:/user/bin/git-shell   第六步，克隆远程仓库： git clone git@server:/srv/blog.git
第七步，设置本地仓库的origin： 如果先有本地仓库，后有服务器的裸仓库，可以设置本地仓库的origin:</description>
    </item>
    
  </channel>
</rss>
